/*
 * This file is generated by jOOQ.
 */
package fi.jubic.snoozy.example.db.tables;


import fi.jubic.snoozy.example.db.Indexes;
import fi.jubic.snoozy.example.db.Keys;
import fi.jubic.snoozy.example.db.Test;
import fi.jubic.snoozy.example.db.tables.records.TodoRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Todo extends TableImpl<TodoRecord> {

    private static final long serialVersionUID = -251340152;

    /**
     * The reference instance of <code>test.todo</code>
     */
    public static final Todo TODO = new Todo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TodoRecord> getRecordType() {
        return TodoRecord.class;
    }

    /**
     * The column <code>test.todo.id</code>.
     */
    public final TableField<TodoRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>test.todo.title</code>.
     */
    public final TableField<TodoRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>test.todo.body</code>.
     */
    public final TableField<TodoRecord, String> BODY = createField("body", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>test.todo.user_id</code>.
     */
    public final TableField<TodoRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>test.todo</code> table reference
     */
    public Todo() {
        this(DSL.name("todo"), null);
    }

    /**
     * Create an aliased <code>test.todo</code> table reference
     */
    public Todo(String alias) {
        this(DSL.name(alias), TODO);
    }

    /**
     * Create an aliased <code>test.todo</code> table reference
     */
    public Todo(Name alias) {
        this(alias, TODO);
    }

    private Todo(Name alias, Table<TodoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Todo(Name alias, Table<TodoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Todo(Table<O> child, ForeignKey<O, TodoRecord> key) {
        super(child, key, TODO);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TODO_FK_TODO_USER_ID, Indexes.TODO_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TodoRecord, Long> getIdentity() {
        return Keys.IDENTITY_TODO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TodoRecord> getPrimaryKey() {
        return Keys.KEY_TODO_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TodoRecord>> getKeys() {
        return Arrays.<UniqueKey<TodoRecord>>asList(Keys.KEY_TODO_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TodoRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TodoRecord, ?>>asList(Keys.FK_TODO_USER_ID);
    }

    public User user() {
        return new User(this, Keys.FK_TODO_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Todo as(String alias) {
        return new Todo(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Todo as(Name alias) {
        return new Todo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Todo rename(String name) {
        return new Todo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Todo rename(Name name) {
        return new Todo(name, null);
    }
}
